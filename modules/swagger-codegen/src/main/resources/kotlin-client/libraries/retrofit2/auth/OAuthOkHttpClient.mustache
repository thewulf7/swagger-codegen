package {{invokerPackage}}.auth;

import java.io.IOException
import kotlin.collections.Map.Entry

import org.apache.oltu.oauth2.client.HttpClient
import org.apache.oltu.oauth2.client.request.OAuthClientRequest
import org.apache.oltu.oauth2.client.response.OAuthClientResponse
import org.apache.oltu.oauth2.client.response.OAuthClientResponseFactory
import org.apache.oltu.oauth2.common.exception.OAuthProblemException
import org.apache.oltu.oauth2.common.exception.OAuthSystemException

import okhttp3.Interceptor
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Request.Builder
import okhttp3.Response
import okhttp3.MediaType
import okhttp3.RequestBody

class OAuthOkHttpClient:HttpClient {

  private val client:OkHttpClient

  constructor() {
    this.client = OkHttpClient()
  }

  constructor(client:OkHttpClient) {
    this.client = client
  }

  @Throws(OAuthSystemException::class, OAuthProblemException::class)
  fun <T : OAuthClientResponse> execute(request:OAuthClientRequest, headers:Map<String, String>,
                                        requestMethod:String, responseClass:Class<T>):T {
    val mediaType = MediaType.parse("application/json")
    val requestBuilder = Request.Builder().url(request.getLocationUri())
    if (headers != null)
    {
      for (entry in headers.entries)
      {
        if (entry.key.equals("Content-Type", ignoreCase = true))
        {
          mediaType = MediaType.parse(entry.value)
        }
        else
        {
          requestBuilder.addHeader(entry.key, entry.value)
        }
      }
    }
    val body = if (request.getBody() != null) RequestBody.create(mediaType, request.getBody()) else null
    requestBuilder.method(requestMethod, body)
    try
    {
      val response = client.newCall(requestBuilder.build()).execute()
      return OAuthClientResponseFactory.createCustomResponse(
        response.body().string(),
        response.body().contentType().toString(),
        response.code(),
        responseClass)
    }
    catch (e:IOException) {
      throw OAuthSystemException(e)
    }
  }

  fun shutdown() {
    // Nothing to do here
  }

}
